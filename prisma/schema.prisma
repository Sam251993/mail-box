// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      =  env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid()) @map("_id")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid()) @map("_id")
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    password      String?
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    boards        Board[]
}

model VerificationToken {
    identifier String  @id @map("_id")
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id     String  @id @default(cuid()) @map("_id")
    name   String
    tasks  Task[]
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Task {
    id          String     @id @default(cuid()) @map("_id")
    name        String
    description String
    status      TaskStatus
    Board       Board?     @relation(fields: [boardId], references: [id])
    boardId     String?
    // comments    TaskComment[]
}

enum TaskStatus {
    BACKLOG
    TODO
    IN_PROGRESS
    ICE_BOXED
    TESTING
    DONE
}

model Comment {
    id                  String      @id @default(cuid()) @map("_id")
    email               String      
    from_email          String
    to_id               String  
    to_email            String
    title               String
    text                String
    date                DateTime
    answered_to_id      String      
    conversation_id     String?  
}
